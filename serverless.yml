service: SLS-Cognito

provider:
  name: aws
  runtime: nodejs8.10
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 128

plugins:
  - serverless-pseudo-parameters

functions:
  CUPDomain:
    handler: CUPDomain.handler
    role: LambdaforCognito
  CUPClientSettings:
    handler: CUPClientSettings.handler
    role: LambdaforCognito
  CUPIdentityProvider:
    handler: CUPIdentityProvider.handler
    role: LambdaforCognito

resources:
  Resources:
    LambdaforCognito:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-LambdaforCognito
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: "sts:AssumeRole"
              Principal:
                Service: lambda.amazonaws.com
        Policies:
          - PolicyName: LambdaforCognitoPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "cognito-idp:UpdateUserPoolClient"
                    - "cognito-idp:CreateUserPoolDomain"
                    - "cognito-idp:DeleteUserPoolDomain"
                    - "cognito-idp:DescribeUserPoolDomain"
                    - "cognito-idp:CreateIdentityProvider"
                    - "cognito-idp:UpdateIdentityProvider"
                    - "cognito-idp:DeleteIdentityProvider"
                  Resource: "arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/*"
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - Fn::GetAtt: [CUPDomainLogGroup, Arn]
                    - Fn::GetAtt: [CUPClientSettingsLogGroup, Arn]
                    - Fn::GetAtt: [CUPIdentityProviderLogGroup, Arn]
    AppUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: AppUserPool
    AppUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: AppUserPoolClient
        GenerateSecret: true
        UserPoolId:
          Ref: AppUserPool
    AppUserPoolDomain:
      Type: "Custom::${self:service}-${self:provider.stage}-CUPDomain"
      DependsOn:
        - CUPDomainLambdaFunction
      Properties:
        ServiceToken:
          Fn::GetAtt: [CUPDomainLambdaFunction, Arn]
        UserPoolId:
          Ref: AppUserPool
        Domain: "appuserpool01234"
    FacebookIdp:
      Type: "Custom::${self:service}-${self:provider.stage}-CUPIdentityProvider"
      DependsOn:
        - CUPIdentityProviderLambdaFunction
      Properties:
        ServiceToken:
          Fn::GetAtt: [CUPIdentityProviderLambdaFunction, Arn]
        UserPoolId:
          Ref: AppUserPool
        ProviderName: Facebook
        ProviderType: Facebook
        Client_id: "YourFacebookAppID"
        Client_secret: "YourFacebookAppSecert"
        Authorize_scopes: "public_profile,email"
        AttributeMapping:
          Email: "email"
    GoogleIdp:
      Type: "Custom::${self:service}-${self:provider.stage}-CUPIdentityProvider"
      DependsOn:
        - CUPIdentityProviderLambdaFunction
      Properties:
        ServiceToken:
          Fn::GetAtt: [CUPIdentityProviderLambdaFunction, Arn]
        UserPoolId:
          Ref: AppUserPool
        ProviderName: Google
        ProviderType: Google
        Client_id: "YourGoogleAppID"
        Client_secret: "YourGoogleAppSecert"
        Authorize_scopes: "profile email openid"
        AttributeMapping:
          Email: "email"
    AmazonIdp:
      Type: "Custom::${self:service}-${self:provider.stage}-CUPIdentityProvider"
      DependsOn:
        - CUPIdentityProviderLambdaFunction
      Properties:
        ServiceToken:
          Fn::GetAtt: [CUPIdentityProviderLambdaFunction, Arn]
        UserPoolId:
          Ref: AppUserPool
        ProviderName: LoginWithAmazon
        ProviderType: LoginWithAmazon
        Client_id: "YourAmazonAppID"
        Client_secret: "YourAmazonAppSecert"
        Authorize_scopes: "profile"
        AttributeMapping:
          Email: "email"
    AppUserPoolClientSettings:
      Type: "Custom::${self:service}-${self:provider.stage}-CUPClientSettings"
      DependsOn:
        - CUPClientSettingsLambdaFunction
        - FacebookIdp
        - GoogleIdp
        - AmazonIdp
      Properties:
        ServiceToken:
          Fn::GetAtt: [CUPClientSettingsLambdaFunction, Arn]
        UserPoolId:
          Ref: AppUserPool
        UserPoolClientId:
          Ref: AppUserPoolClient
        SupportedIdentityProviders:
          - COGNITO
          - Facebook
          - Google
          - LoginWithAmazon
        CallbackURL: "https://www.yourdomain.com/callback" ##Replace this with your app callback url
        LogoutURL: "https://www.yourdomain.com/logout" ##Replace this with your app logout url
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - openid
